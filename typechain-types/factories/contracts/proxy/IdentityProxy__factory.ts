/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  IdentityProxy,
  IdentityProxyInterface,
} from "../../../contracts/proxy/IdentityProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_implementationAuthority",
        type: "address",
      },
      {
        internalType: "address",
        name: "initialManagementKey",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "implementationAuthority",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610676380380610676833981810160405281019061003291906102aa565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aaf10f426040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010491906102ea565b905060008173ffffffffffffffffffffffffffffffffffffffff16836040516024016101309190610326565b6040516020818303038152906040527fc4d66de8000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516101ba91906103b2565b600060405180830381855af49150503d80600081146101f5576040519150601f19603f3d011682016040523d82523d6000602084013e6101fa565b606091505b505090508061023e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023590610426565b60405180910390fd5b50505050610446565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102778261024c565b9050919050565b6102878161026c565b811461029257600080fd5b50565b6000815190506102a48161027e565b92915050565b600080604083850312156102c1576102c0610247565b5b60006102cf85828601610295565b92505060206102e085828601610295565b9150509250929050565b600060208284031215610300576102ff610247565b5b600061030e84828501610295565b91505092915050565b6103208161026c565b82525050565b600060208201905061033b6000830184610317565b92915050565b600081519050919050565b600081905092915050565b60005b8381101561037557808201518184015260208101905061035a565b60008484015250505050565b600061038c82610341565b610396818561034c565b93506103a6818560208601610357565b80840191505092915050565b60006103be8284610381565b915081905092915050565b600082825260208201905092915050565b7f496e697469616c697a6174696f6e206661696c65642e00000000000000000000600082015250565b60006104106016836103c9565b915061041b826103da565b602082019050919050565b6000602082019050818103600083015261043f81610403565b9050919050565b610221806104556000396000f3fe6080604052600436106100225760003560e01c80632307f882146100e257610023565b5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aaf10f426040518163ffffffff1660e01b8152600401602060405180830381865afa158015610091573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100b59190610194565b90503660008037600080366000846127105a03f43d806000803e81600081146100dd57816000f35b816000fd5b3480156100ee57600080fd5b506100f761010d565b60405161010491906101d0565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061016182610136565b9050919050565b61017181610156565b811461017c57600080fd5b50565b60008151905061018e81610168565b92915050565b6000602082840312156101aa576101a9610131565b5b60006101b88482850161017f565b91505092915050565b6101ca81610156565b82525050565b60006020820190506101e560008301846101c1565b9291505056fea2646970667358221220c595cdf1ba05f43708379e7eabe0fab238cf119420cac8d31fb18894569fa6df64736f6c63430008110033";

type IdentityProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IdentityProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IdentityProxy__factory extends ContractFactory {
  constructor(...args: IdentityProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _implementationAuthority: PromiseOrValue<string>,
    initialManagementKey: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<IdentityProxy> {
    return super.deploy(
      _implementationAuthority,
      initialManagementKey,
      overrides || {}
    ) as Promise<IdentityProxy>;
  }
  override getDeployTransaction(
    _implementationAuthority: PromiseOrValue<string>,
    initialManagementKey: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _implementationAuthority,
      initialManagementKey,
      overrides || {}
    );
  }
  override attach(address: string): IdentityProxy {
    return super.attach(address) as IdentityProxy;
  }
  override connect(signer: Signer): IdentityProxy__factory {
    return super.connect(signer) as IdentityProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IdentityProxyInterface {
    return new utils.Interface(_abi) as IdentityProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IdentityProxy {
    return new Contract(address, _abi, signerOrProvider) as IdentityProxy;
  }
}
